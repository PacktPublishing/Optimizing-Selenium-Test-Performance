!function(){"use strict";function e(e,t,s,n){return new(s||(s=Promise))(function(o,i){function r(e){try{a(n.next(e))}catch(e){i(e)}}function c(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){e.done?o(e.value):new s(function(t){t(e.value)}).then(r,c)}a((n=n.apply(e,t)).next())})}function t(e){return(...t)=>new Promise((s,n)=>e(...t,e=>s(e)))}Object.assign;class s{static log(...e){window.__env}}class n{constructor(e){this.chromeApi=e,this.registeredHandlers=[]}listenToBackgroundRequests(e,t){if(s.log("[bh] register bg request listener",e),!this.chromeApi||!this.chromeApi.runtime||!this.chromeApi.runtime.onMessage)return;const n=(n,o,i)=>{if(n.msg===e){s.log("[bh] received known message in content script",n);const e=t(n);if(e&&"function"==typeof e.then)return e.then(i),!0;i(e)}else s.log("[bh] received unknown message in content script",n)};this.chromeApi.runtime.onMessage.addListener(n),this.registeredHandlers.push(n)}removeAllListeners(){this.registeredHandlers.forEach(e=>this.chromeApi.runtime.onMessage.removeListener(e))}}class o{constructor(e){e&&(this.queryTabs=e.tabs&&t(e.tabs.query),this.sendMessageToTabRaw=e.tabs&&t(e.tabs.sendMessage),this.sendMessageToBackgroundRaw=e.runtime&&t(e.runtime.sendMessage),this.getFromLocalStore=e.storage&&t(e.storage.local.get))}sendMessageToBackground(t){return e(this,void 0,void 0,function*(){if(!this.sendMessageToBackgroundRaw)throw new Error("sendMessageToBackground is not available in this context");return s.log("[cau] send message to background",t),yield this.sendMessageToBackgroundRaw(t)})}sendMessageToTab(t,n){return e(this,void 0,void 0,function*(){if(!this.sendMessageToTabRaw)throw new Error("sendMessageToTab is not available in this context");return s.log("[cau] send message to tab",t,n),yield this.sendMessageToTabRaw(t,n)})}getCurrentTab(){return e(this,void 0,void 0,function*(){if(!this.sendMessageToTabRaw)throw new Error("getCurrentTab is not available in this context");const e=yield this.queryTabs({active:!0,currentWindow:!0});if(e&&1===e.length&&e[0]&&e[0].id)return e[0].id;throw new Error(`failed to identify current tab, got: ${e}`)})}getMainConfig(){return e(this,void 0,void 0,function*(){if(!this.getFromLocalStore)throw new Error("getMainConfig is not available in this context");const e=yield this.getFromLocalStore();return e&&(e.mainConfig||{})})}}class i{copy(e,t){document.oncopy=(s=>{s.clipboardData.setData(t,e),s.preventDefault()}),document.execCommand("Copy",!1,null)}}class r{constructor(t,s,n=new i){if(this.chromeApi=t,this.messageHub=s,this.clipboard=n,this.onContextMenuClicked=(t=>e(this,void 0,void 0,function*(){if(t.menuItemId.startsWith("rxse-selector-")){const e=t.menuItemId.slice("rxse-selector-".length);this.buildAndCopySelector(e)}})),!s||!s.getPort)throw new Error("invalid_arg: messageHub");this.chromeApiUtils=new o(t),this.chromeApi.runtime.onInstalled.addListener(()=>this.installContextMenus()),this.chromeApi.contextMenus.onClicked.addListener(e=>this.onContextMenuClicked(e))}static waitFor(e){return new Promise(t=>setTimeout(t,e))}installContextMenus(n){return e(this,void 0,void 0,function*(){const o=t(this.chromeApi.contextMenus.removeAll),i=t(this.chromeApi.contextMenus.create);!n&&this.installedMenuItems||n&&this.installedMenuItems&&this.installedMenuItems.length===n.length&&this.installedMenuItems.every((e,t)=>n[t]===e)||(s.log("[cm] install menus:",n||"<all>"),yield o(),yield i({contexts:["all"],documentUrlPatterns:["http://*/*","https://*/*","file:///*/*"],enabled:!!n&&!!n.length,id:"rxse-all",title:"Copy selector"}),this.installedMenuItems=[],n&&n.length&&(yield Promise.all(n.map(t=>e(this,void 0,void 0,function*(){return yield i({contexts:["all"],id:`rxse-selector-${t}`,parentId:"rxse-all",title:t})}))),this.installedMenuItems=n))})}updateContextMenu(e,s){return t(this.chromeApi.contextMenus.update)(e,s)}buildAndCopySelector(t){return e(this,void 0,void 0,function*(){const e=yield this.chromeApiUtils.getMainConfig(),{tabId:n,selector:o}=yield this.requestSelectorForMostRecentlyClickedElement("auto"!==t?t:void 0,!e||e.ignoreDynamicIds);s.log("[cm] received new selector from active tab",n,o);const i=!e||e.copyWithQuotes?JSON.stringify(o.selector):o.selector;this.clipboard.copy(i,"text/plain"),this.postNewSelector(n,o)})}requestSelectorForMostRecentlyClickedElement(t,s=!0){return e(this,void 0,void 0,function*(){const e=yield this.chromeApiUtils.getCurrentTab();return{tabId:e,selector:yield this.requestSelector(e,t,s)}})}requestSelector(t,s,n=!0){return new Promise((o,i)=>{const c=[],a=e=>{"provide-happy-result"===e.msg&&e.matchingElements&&c.push(e)};this.chromeApi.runtime.onMessage.addListener(a);const l=(new Date).getTime();this.chromeApiUtils.sendMessageToTab(t,{msg:"build-selector",forcedSelectorType:s,ignoreDynamicIds:n}).then(()=>e(this,void 0,void 0,function*(){let e,t=0,s=0;for(;s<20;)e!==t?s=0:s++,e=t,yield r.waitFor(10),t=c.length;this.chromeApi.runtime.onMessage.removeListener(a);const n=(new Date).getTime();if(c.sort((e,t)=>t.time-e.time),c.length<1){const e=(n-l)/1e3;throw new Error(`time-out: failed to get SelectorBuildResult in ${e} s`)}const i=c[0];if(i&&!i.selector)throw new Error(`type error: expected SelectorBuildResult, got ${i}`);o(i)})).catch(i)})}postNewSelector(e,t){const s=this.messageHub.getPort(e);s&&s.postMessage({msg:"update-user-selector",selector:t})}}class c{constructor(e){this.tabPorts={},s.log("[mh] init message-hub"),e.runtime.onConnect.addListener(t=>{s.log("[mh] got new connection...");let n;const o=e=>{n||(s.log("[mh] registered tab connection",e),n=e.tabId,this.tabPorts[n]=t)},i=e=>{s.log("[mh] init mapping"),o(e),t.onMessage.removeListener(i)};t.onMessage.addListener(i),t.onDisconnect.addListener(()=>{s.log("[mh] disconnect",n),e.tabs.sendMessage(n,{msg:"devtools-disconnected"}),delete this.tabPorts[n]})}),e.tabs.onRemoved.addListener(e=>{delete this.tabPorts[e]}),e.tabs.onReplaced.addListener((e,t)=>{delete this.tabPorts[t]})}getPort(e){return this.tabPorts[e]}}if(!window.chrome){console.error("background script requires Chrome API!");const e=()=>{},t={addListener:e,removeListener:e};window.chrome={contextMenus:{onClicked:t},runtime:{onConnect:t,onInstalled:t},tabs:{onRemoved:t,onReplaced:t}}}const a=new c(window.chrome),l=new r(window.chrome,a),d=new n(window.chrome);d.listenToBackgroundRequests("init-content-script",e=>l.installContextMenus(e.selectorTypes)),d.listenToBackgroundRequests("mouse-target-update",e=>l.updateContextMenu("rxse-selector-link-text",{enabled:e.elementInfo.isLink})),window.chrome.runtime.onInstalled.addListener(()=>{window.chrome.tabs.query({},e=>{e.forEach(e=>{chrome.tabs.executeScript(e.id,{file:"scripts/inject-bundle.js",allFrames:!0},t=>{s.log("[bg] Injected",t?t.length:0,"times for tab",e.id)})})})})}();